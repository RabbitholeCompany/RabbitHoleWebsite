---
import { Icon } from "astro-icon";
import { Picture } from "astro:assets";

interface CallToAction {
  text: string;
  href: string;
  icon?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  content?: string;
  callToAction?: string | CallToAction;
  callToAction2?: string | CallToAction;
  callToAction3?: string | CallToAction;
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  content = await Astro.slots.render("content"),
  callToAction = await Astro.slots.render("callToAction"),
  callToAction2 = await Astro.slots.render("callToAction2"),
  callToAction3 = await Astro.slots.render("callToAction3"),
  image = await Astro.slots.render("image"),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose">
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-screen-lg mx-auto">
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-xl text-muted mb-6 dark:text-slate-300"
                set:html={subtitle}
              />
            )
          }
          <!-- <div
            class="max-w-xs sm:max-w-md m-5 flex flex-nowrap flex-col sm:flex-row sm:justify-end gap-4"
          > -->
          <div
            class="flex flex-col flex-nowrap gap-4 m-auto max-w-xs sm:flex-row sm:justify-center sm:max-w-xl">
            {
              callToAction && (
                <div class="flex sm:basis-1/3">
                  {typeof callToAction === "string" ? (
                    <Fragment set:html={callToAction} />
                  ) : (
                    <a
                      class="btn w-full "
                      href={callToAction?.href}
                      rel="noopener">
                      {callToAction?.icon && (
                        <>
                          <Icon
                            name={callToAction.icon}
                            class="w-5 h-5 mr-1 -ml-1.5"
                          />
                          &nbsp;
                        </>
                      )}
                      {callToAction?.text}
                    </a>
                  )}
                </div>
              )
            }
            {
              callToAction2 && (
                <div class="flex sm:basis-1/3">
                  {typeof callToAction2 === "string" ? (
                    <Fragment set:html={callToAction2} />
                  ) : (
                    <a
                      class="btn w-full text-white transition-all duration-500 bg-gradient-to-br from-blue-400 via-purple-500 to-purple-800 bg-size-200 hover:bg-right-bottom border-purple-800"
                      href={callToAction2?.href}>
                      {callToAction2?.icon && (
                        <>
                          <Icon
                            name={callToAction2.icon}
                            class="w-5 h-5 mr-1 -ml-1.5"
                          />
                          &nbsp;
                        </>
                      )}
                      {callToAction2.text}
                    </a>
                  )}
                </div>
              )
            }
            {
              callToAction3 && (
                <div class="flex sm:basis-1/3">
                  {typeof callToAction3 === "string" ? (
                    <Fragment set:html={callToAction3} />
                  ) : (
                    <a class="btn w-full" href={callToAction3?.href}>
                      {callToAction3?.icon && (
                        <>
                          <Icon
                            name={callToAction3.icon}
                            class="w-5 h-5 mr-1 -ml-1.5"
                          />
                          &nbsp;
                        </>
                      )}
                      {callToAction3.text}
                    </a>
                  )}
                </div>
              )
            }
          </div>
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div>
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === "string" ? (
                <Fragment set:html={image} />
              ) : (
                <Picture
                  class="mx-auto rounded-md max-w-xs"
                  widths={[100, 300, 500]}
                  loading="eager"
                  width={300}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
